{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the any-agent docs","text":"<pre><code>from random import choice\nfrom any_agents import AgentSchema, load_agent, run_agent\n\nagent = load_agent(\n    framework=choice([\"langchain\", \"openai\", \"smolagents\"])\n    main_agent=AgentSchema(model_id=\"gpt-4o-mini\"),\n)\nresult = run_agent(agent, \"What day is today?\")\n</code></pre>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#any_agent.schema.AgentSchema","title":"<code>any_agent.schema.AgentSchema</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>src/any_agent/schema.py</code> <pre><code>class AgentSchema(BaseModel):\n    model_id: str\n    name: str = \"default-name\"\n    instructions: str | None = None\n    api_base: str | None = None\n    api_key_var: str | None = None\n    tools: list[str] = Field(default_factory=list)\n    handoff: bool = False\n    agent_type: str | None = None\n    model_class: str | None = None\n    description: str | None = None\n</code></pre>"},{"location":"api/#any_agent.loaders","title":"<code>any_agent.loaders</code>","text":""},{"location":"api/#any_agent.loaders.load_agent","title":"<code>load_agent(framework, main_agent, managed_agents=None)</code>","text":"<p>Loads an agent using the provided <code>framework</code>.</p> <p>The loaded agent can be then passed to <code>run_agent</code></p> <p>Parameters:</p> Name Type Description Default <code>main_agent</code> <code>AgentSchema</code> <p>This will be the returned agent.</p> required <code>managed_agents</code> <code>list[AgentSchema] | None</code> <p>A list of agents that will be managed by <code>main_agent</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[CompiledGraph, Agent, AgentType]</code> <p>An agent instance configured according to the given <code>AgentSchema</code>.</p> <code>Union[CompiledGraph, Agent, AgentType]</code> <p>The instance type depends on the selected framework.</p> Source code in <code>src/any_agent/loaders/__init__.py</code> <pre><code>def load_agent(\n    framework: str,\n    main_agent: \"AgentSchema\",\n    managed_agents: list[\"AgentSchema\"] | None = None,\n) -&gt; Union[\"CompiledGraph\", \"Agent\", \"AgentType\"]:\n    \"\"\"Loads an agent using the provided `framework`.\n\n    The loaded agent can be then passed to [`run_agent`][any_agent.runners.run_agent]\n\n    Args:\n        main_agent: This will be the returned agent.\n        managed_agents: A list of agents that will be managed by `main_agent`.\n\n    Returns:\n        An agent instance configured according to the given `AgentSchema`.\n        The instance type depends on the selected framework.\n    \"\"\"\n    match framework:\n        case \"langchain\":\n            return load_lanchain_agent(main_agent, managed_agents)\n        case \"openai\":\n            return load_openai_agent(main_agent, managed_agents)\n        case \"smolagents\":\n            return load_smolagents_agent(main_agent, managed_agents)\n        case _:\n            raise NotImplementedError(f\"{framework} is not supported yet.\")\n</code></pre>"},{"location":"api/#any_agent.runners","title":"<code>any_agent.runners</code>","text":""},{"location":"api/#any_agent.runners.run_agent","title":"<code>run_agent(agent, query)</code>","text":"<p>Run the provided <code>agent</code> instance passing the given <code>query</code>.</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>Union[CompiledGraph, Agent, AgentType]</code> <p>The agent instance loaded with <code>load_agent</code>.</p> required <code>query</code> <code>str</code> <p>The query defining what the agent should do.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The results generated by the <code>agent</code>.</p> <code>Any</code> <p>The type of the results depend on the <code>agent</code>'s framework.</p> Source code in <code>src/any_agent/runners/__init__.py</code> <pre><code>def run_agent(\n    agent: Union[\"CompiledGraph\", \"Agent\", \"AgentType\"],\n    query: str,\n) -&gt; Any:\n    \"\"\"Run the provided `agent` instance passing the given `query`.\n\n    Args:\n        agent: The agent instance loaded with [`load_agent`][any_agent.loaders.load_agent].\n        query: The query defining what the agent should do.\n\n    Returns:\n        The results generated by the `agent`.\n        The type of the results depend on the `agent`'s framework.\n    \"\"\"\n    if isinstance_without_import(agent, \"langchain_core.runnables.base\", \"Runnable\"):\n        return run_langchain_agent(agent, query)    \n    if isinstance_without_import(agent, \"agents.agent\", \"Agent\"):\n        return run_openai_agent(agent, query)\n    if isinstance_without_import(agent, \"smolagents.agents\", \"MultiStepAgent\"):\n        return run_smolagents_agent(agent, query)\n    else:\n        raise NotImplementedError(f\"{agent} is not supported yet.\")\n</code></pre>"},{"location":"api/#any_agent.tools","title":"<code>any_agent.tools</code>","text":""},{"location":"api/#any_agent.tools.ask_user_verification","title":"<code>ask_user_verification(query)</code>","text":"<p>Asks user to verify the given <code>query</code>.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The question that requires verification.</p> required Source code in <code>src/any_agent/tools/user_interaction.py</code> <pre><code>def ask_user_verification(query: str) -&gt; str:\n    \"\"\"Asks user to verify the given `query`.\n\n    Args:\n        query: The question that requires verification.\n    \"\"\"\n    return input(f\"{query} =&gt; Type your answer here:\")\n</code></pre>"},{"location":"api/#any_agent.tools.search_web","title":"<code>search_web(query)</code>","text":"<p>Performs a duckduckgo web search based on your query (think a Google search) then returns the top search results.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The search query to perform.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The top search results.</p> Source code in <code>src/any_agent/tools/web_browsing.py</code> <pre><code>def search_web(query: str) -&gt; str:\n    \"\"\"Performs a duckduckgo web search based on your query (think a Google search) then returns the top search results.\n\n    Args:\n        query: The search query to perform.\n\n    Returns:\n        The top search results.\n    \"\"\"\n    ddgs = DDGS()\n    results = ddgs.text(query, max_results=10)\n    return \"\\n\".join(\n        f\"[{result['title']}]({result['href']})\\n{result['body']}\" for result in results\n    )\n</code></pre>"},{"location":"api/#any_agent.tools.send_console_message","title":"<code>send_console_message(user, query)</code>","text":"<p>Sends the specified user a message via console and returns their response. Args:     query: The question to ask the user.     user: The user to ask the question to. Returns:     str: The user's response.</p> Source code in <code>src/any_agent/tools/user_interaction.py</code> <pre><code>def send_console_message(user: str, query: str) -&gt; str:\n    \"\"\"Sends the specified user a message via console and returns their response.\n    Args:\n        query: The question to ask the user.\n        user: The user to ask the question to.\n    Returns:\n        str: The user's response.\n    \"\"\"\n    return input(f\"{query}\\n{user}&gt;&gt;\")\n</code></pre>"},{"location":"api/#any_agent.tools.show_final_answer","title":"<code>show_final_answer(answer)</code>","text":"<p>Show the final answer to the user.</p> <p>Parameters:</p> Name Type Description Default <code>answer</code> <code>str</code> <p>The final answer.</p> required Source code in <code>src/any_agent/tools/user_interaction.py</code> <pre><code>def show_final_answer(answer: str) -&gt; None:\n    \"\"\"Show the final answer to the user.\n\n    Args:\n        answer: The final answer.\n    \"\"\"\n    logger.info(f\"Final answer: {answer}\")\n    return answer\n</code></pre>"},{"location":"api/#any_agent.tools.show_plan","title":"<code>show_plan(plan)</code>","text":"<p>Show the current plan to the user.</p> <p>Parameters:</p> Name Type Description Default <code>plan</code> <code>str</code> <p>The current plan.</p> required Source code in <code>src/any_agent/tools/user_interaction.py</code> <pre><code>def show_plan(plan: str) -&gt; None:\n    \"\"\"Show the current plan to the user.\n\n    Args:\n        plan: The current plan.\n    \"\"\"\n    logger.info(f\"Current plan: {plan}\")\n    return plan\n</code></pre>"},{"location":"api/#any_agent.tools.visit_webpage","title":"<code>visit_webpage(url)</code>","text":"<p>Visits a webpage at the given url and reads its content as a markdown string. Use this to browse webpages.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url of the webpage to visit.</p> required Source code in <code>src/any_agent/tools/web_browsing.py</code> <pre><code>def visit_webpage(url: str) -&gt; str:\n    \"\"\"Visits a webpage at the given url and reads its content as a markdown string. Use this to browse webpages.\n\n    Args:\n        url: The url of the webpage to visit.\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n\n        markdown_content = markdownify(response.text).strip()\n\n        markdown_content = re.sub(r\"\\n{2,}\", \"\\n\", markdown_content)\n\n        return _truncate_content(markdown_content, 10000)\n    except RequestException as e:\n        return f\"Error fetching the webpage: {str(e)}\"\n    except Exception as e:\n        return f\"An unexpected error occurred: {str(e)}\"\n</code></pre>"}]}