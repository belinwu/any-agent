{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the any-agent docs","text":"<pre><code>from random import choice\nfrom any_agents import AgentSchema, load_agent, run_agent\n\nagent = load_agent(\n    framework=choice([\"langchain\", \"openai\", \"smolagents\"])\n    main_agent=AgentSchema(model_id=\"gpt-4o-mini\"),\n)\nresult = run_agent(agent, \"What day is today?\")\n</code></pre>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#any_agent.frameworks","title":"<code>any_agent.frameworks</code>","text":""},{"location":"api/#any_agent.frameworks.AnyAgent","title":"<code>AnyAgent</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Base abstract class for all agent implementations.</p> <p>This provides a unified interface for different agent frameworks.</p> Source code in <code>src/any_agent/frameworks/any_agent.py</code> <pre><code>class AnyAgent(ABC):\n    \"\"\"Base abstract class for all agent implementations.\n\n    This provides a unified interface for different agent frameworks.\n    \"\"\"\n\n    # factory method\n    @classmethod\n    def create(\n        cls,\n        agent_framework: AgentFramework,\n        agent_config: AgentConfig,\n        managed_agents: Optional[list[AgentConfig]] = None,\n    ) -&gt; \"AnyAgent\":\n        if agent_framework == AgentFramework.SMOLAGENTS:\n            from any_agent.frameworks.smolagents import SmolagentsAgent\n\n            return SmolagentsAgent(agent_config, managed_agents=managed_agents)\n        elif agent_framework == AgentFramework.LANGCHAIN:\n            from any_agent.frameworks.langchain import LangchainAgent\n\n            return LangchainAgent(agent_config, managed_agents=managed_agents)\n        elif agent_framework == AgentFramework.OPENAI:\n            from any_agent.frameworks.openai import OpenAIAgent\n\n            return OpenAIAgent(agent_config, managed_agents=managed_agents)\n        elif agent_framework == AgentFramework.LLAMAINDEX:\n            from any_agent.frameworks.llama_index import LlamaIndexAgent\n\n            return LlamaIndexAgent(agent_config, managed_agents=managed_agents)\n        else:\n            raise ValueError(f\"Unsupported agent framework: {agent_framework}\")\n\n    @abstractmethod\n    def _load_agent(self) -&gt; None:\n        \"\"\"Load the agent instance.\"\"\"\n        pass\n\n    @abstractmethod\n    def run(self, prompt: str) -&gt; Any:\n        \"\"\"Run the agent with the given prompt.\"\"\"\n        pass\n\n    @property\n    @abstractmethod\n    def tools(self) -&gt; List[str]:\n        \"\"\"\n        Return the tools used by the agent.\n        This property is read-only and cannot be modified.\n        \"\"\"\n        pass\n\n    def __init__(self):\n        raise NotImplementedError(\n            \"Cannot instantiate the base class AnyAgent, please use the factory method 'AnyAgent.create'\"\n        )\n\n    @property\n    def agent(self):\n        \"\"\"\n        The underlying agent implementation from the framework.\n\n        This property is intentionally restricted to maintain framework abstraction\n        and prevent direct dependency on specific agent implementations.\n\n        If you need functionality that relies on accessing the underlying agent:\n        1. Consider if the functionality can be added to the AnyAgent interface\n        2. Submit a GitHub issue describing your use case\n        3. Contribute a PR implementing the needed functionality\n\n        Raises:\n            NotImplementedError: Always raised when this property is accessed\n        \"\"\"\n        raise NotImplementedError(\n            \"Cannot access the 'agent' property of AnyAgent, if you need to use functionality that relies on the underlying agent framework, please file a Github Issue or we welcome a PR to add the functionality to the AnyAgent class\"\n        )\n</code></pre>"},{"location":"api/#any_agent.frameworks.AnyAgent.agent","title":"<code>agent</code>  <code>property</code>","text":"<p>The underlying agent implementation from the framework.</p> <p>This property is intentionally restricted to maintain framework abstraction and prevent direct dependency on specific agent implementations.</p> <p>If you need functionality that relies on accessing the underlying agent: 1. Consider if the functionality can be added to the AnyAgent interface 2. Submit a GitHub issue describing your use case 3. Contribute a PR implementing the needed functionality</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>Always raised when this property is accessed</p>"},{"location":"api/#any_agent.frameworks.AnyAgent.tools","title":"<code>tools</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Return the tools used by the agent. This property is read-only and cannot be modified.</p>"},{"location":"api/#any_agent.frameworks.AnyAgent.run","title":"<code>run(prompt)</code>  <code>abstractmethod</code>","text":"<p>Run the agent with the given prompt.</p> Source code in <code>src/any_agent/frameworks/any_agent.py</code> <pre><code>@abstractmethod\ndef run(self, prompt: str) -&gt; Any:\n    \"\"\"Run the agent with the given prompt.\"\"\"\n    pass\n</code></pre>"},{"location":"api/#any_agent.frameworks.LangchainAgent","title":"<code>LangchainAgent</code>","text":"<p>               Bases: <code>AnyAgent</code></p> <p>LangChain agent implementation that handles both loading and running.</p> Source code in <code>src/any_agent/frameworks/langchain.py</code> <pre><code>class LangchainAgent(AnyAgent):\n    \"\"\"LangChain agent implementation that handles both loading and running.\"\"\"\n\n    def __init__(\n        self, config: AgentConfig, managed_agents: Optional[list[AgentConfig]] = None\n    ):\n        self.managed_agents = managed_agents\n        self.config = config\n        self._agent = None\n        self._tools = []\n        self._load_agent()\n\n    @logger.catch(reraise=True)\n    def _load_agent(self) -&gt; None:\n        \"\"\"Load the LangChain agent with the given configuration.\"\"\"\n        if not langchain_available:\n            raise ImportError(\n                \"You need to `pip install langchain langgraph` to use this agent\"\n            )\n\n        if not self.config.tools:\n            self.config.tools = [\n                \"any_agent.tools.search_web\",\n                \"any_agent.tools.visit_webpage\",\n            ]\n\n        if self.managed_agents:\n            raise NotImplementedError(\"langchain managed agents are not supported yet\")\n\n        imported_tools, mcp_managers = import_and_wrap_tools(\n            self.config.tools, agent_framework=AgentFramework.LANGCHAIN\n        )\n\n        # Extract tools from MCP managers and add them to the imported_tools list\n        for manager in mcp_managers:\n            imported_tools.extend(manager.tools)\n\n        if \"/\" in self.config.model_id:\n            model_provider, model_id = self.config.model_id.split(\"/\")\n            model = init_chat_model(\n                model=model_id,\n                model_provider=model_provider,\n                **self.config.model_args or {},\n            )\n        else:\n            model = init_chat_model(\n                self.config.model_id, **self.config.model_args or {}\n            )\n\n        self._agent: CompiledGraph = create_react_agent(\n            model=model,\n            tools=imported_tools,\n            prompt=self.config.instructions,\n            **self.config.agent_args or {},\n        )\n        # Langgraph doesn't let you easily access what tools are loaded from the CompiledGraph, so we'll store a list of them in this class\n        self._tools = imported_tools\n\n    @logger.catch(reraise=True)\n    def run(self, prompt: str) -&gt; Any:\n        \"\"\"Run the LangChain agent with the given prompt.\"\"\"\n        inputs = {\"messages\": [(\"user\", prompt)]}\n        message = None\n        for s in self._agent.stream(inputs, stream_mode=\"values\"):\n            message = s[\"messages\"][-1]\n            if isinstance(message, tuple):\n                logger.debug(message)\n            else:\n                message.pretty_print()\n        return message\n\n    @property\n    def tools(self) -&gt; List[str]:\n        \"\"\"\n        Return the tools used by the agent.\n        This property is read-only and cannot be modified.\n        \"\"\"\n        return self._tools\n</code></pre>"},{"location":"api/#any_agent.frameworks.LangchainAgent.tools","title":"<code>tools</code>  <code>property</code>","text":"<p>Return the tools used by the agent. This property is read-only and cannot be modified.</p>"},{"location":"api/#any_agent.frameworks.LangchainAgent.run","title":"<code>run(prompt)</code>","text":"<p>Run the LangChain agent with the given prompt.</p> Source code in <code>src/any_agent/frameworks/langchain.py</code> <pre><code>@logger.catch(reraise=True)\ndef run(self, prompt: str) -&gt; Any:\n    \"\"\"Run the LangChain agent with the given prompt.\"\"\"\n    inputs = {\"messages\": [(\"user\", prompt)]}\n    message = None\n    for s in self._agent.stream(inputs, stream_mode=\"values\"):\n        message = s[\"messages\"][-1]\n        if isinstance(message, tuple):\n            logger.debug(message)\n        else:\n            message.pretty_print()\n    return message\n</code></pre>"},{"location":"api/#any_agent.frameworks.LlamaIndexAgent","title":"<code>LlamaIndexAgent</code>","text":"<p>               Bases: <code>AnyAgent</code></p> <p>LLamaIndex agent implementation that handles both loading and running.</p> Source code in <code>src/any_agent/frameworks/llama_index.py</code> <pre><code>class LlamaIndexAgent(AnyAgent):\n    \"\"\"LLamaIndex agent implementation that handles both loading and running.\"\"\"\n\n    def __init__(\n        self, config: AgentConfig, managed_agents: Optional[list[AgentConfig]] = None\n    ):\n        self.managed_agents: Optional[list[AgentConfig]] = managed_agents\n        self.config: AgentConfig = config\n        self._agent = None\n        self._load_agent()\n\n    def _get_model(self, agent_config: AgentConfig):\n        \"\"\"Get the model configuration for a llama_index agent.\"\"\"\n        if not agent_config.model_type:\n            agent_config.model_type = DEFAULT_MODEL_CLASS\n        module, class_name = agent_config.model_type.split(\".\")\n        model_type = getattr(\n            importlib.import_module(f\"llama_index.llms.{module}\"), class_name\n        )\n\n        return model_type(model=agent_config.model_id, **agent_config.model_args or {})\n\n    @logger.catch(reraise=True)\n    def _load_agent(self) -&gt; None:\n        \"\"\"Load the LLamaIndex agent with the given configuration.\"\"\"\n        if not llama_index_available:\n            raise ImportError(\"You need to `pip install llama-index` to use this agent\")\n\n        if not self.config.tools:\n            self.config.tools = [\n                \"any_agent.tools.search_web\",\n                \"any_agent.tools.visit_webpage\",\n            ]\n\n        if self.managed_agents:\n            raise NotImplementedError(\n                \"llama-index managed agents are not supported yet\"\n            )\n\n        imported_tools, mcp_managers = import_and_wrap_tools(\n            self.config.tools, agent_framework=AgentFramework.LLAMAINDEX\n        )\n\n        # Extract tools from MCP managers and add them to the imported_tools list\n        for manager in mcp_managers:\n            imported_tools.extend(manager.tools)\n\n        self._agent = ReActAgent(\n            name=self.config.name,\n            tools=imported_tools,\n            llm=self._get_model(self.config),\n            **self.config.agent_args or {},\n        )\n\n    async def _async_run(self, prompt):\n        result = await self._agent.run(prompt)\n        return result\n\n    @logger.catch(reraise=True)\n    def run(self, prompt: str) -&gt; Any:\n        \"\"\"Run the LlamaIndex agent with the given prompt.\"\"\"\n        import asyncio\n\n        return asyncio.run(self._async_run(prompt))\n\n    @property\n    def tools(self) -&gt; List[str]:\n        \"\"\"\n        Return the tools used by the agent.\n        This property is read-only and cannot be modified.\n        \"\"\"\n        return self._agent.tools\n</code></pre>"},{"location":"api/#any_agent.frameworks.LlamaIndexAgent.tools","title":"<code>tools</code>  <code>property</code>","text":"<p>Return the tools used by the agent. This property is read-only and cannot be modified.</p>"},{"location":"api/#any_agent.frameworks.LlamaIndexAgent.run","title":"<code>run(prompt)</code>","text":"<p>Run the LlamaIndex agent with the given prompt.</p> Source code in <code>src/any_agent/frameworks/llama_index.py</code> <pre><code>@logger.catch(reraise=True)\ndef run(self, prompt: str) -&gt; Any:\n    \"\"\"Run the LlamaIndex agent with the given prompt.\"\"\"\n    import asyncio\n\n    return asyncio.run(self._async_run(prompt))\n</code></pre>"},{"location":"api/#any_agent.frameworks.OpenAIAgent","title":"<code>OpenAIAgent</code>","text":"<p>               Bases: <code>AnyAgent</code></p> <p>OpenAI agent implementation that handles both loading and running.</p> Source code in <code>src/any_agent/frameworks/openai.py</code> <pre><code>class OpenAIAgent(AnyAgent):\n    \"\"\"OpenAI agent implementation that handles both loading and running.\"\"\"\n\n    def __init__(\n        self, config: AgentConfig, managed_agents: Optional[list[AgentConfig]] = None\n    ):\n        self.managed_agents = managed_agents\n        self.config = config\n        self._agent = None\n        self._load_agent()\n\n    def _get_model(self, agent_config: AgentConfig):\n        \"\"\"Get the model configuration for an OpenAI agent.\"\"\"\n        model_args = agent_config.model_args or {}\n        api_key_var = model_args.pop(\"api_key_var\", None)\n        base_url = model_args.pop(\"base_url\", None)\n        if api_key_var and base_url:\n            external_client = AsyncOpenAI(\n                api_key=os.environ[api_key_var],\n                base_url=base_url,\n            )\n            return OpenAIChatCompletionsModel(\n                model=agent_config.model_id,\n                openai_client=external_client,\n            )\n        return agent_config.model_id\n\n    @logger.catch(reraise=True)\n    def _load_agent(self) -&gt; None:\n        \"\"\"Load the OpenAI agent with the given configuration.\"\"\"\n        if not agents_available:\n            raise ImportError(\n                \"You need to `pip install openai-agents` to use this agent\"\n            )\n\n        if not self.managed_agents and not self.config.tools:\n            self.config.tools = [\n                \"any_agent.tools.search_web\",\n                \"any_agent.tools.visit_webpage\",\n            ]\n        tools, mcp_servers = import_and_wrap_tools(\n            self.config.tools, agent_framework=AgentFramework.OPENAI\n        )\n\n        handoffs = []\n        if self.managed_agents:\n            for managed_agent in self.managed_agents:\n                managed_tools, managed_mcp_servers = import_and_wrap_tools(\n                    managed_agent.tools, agent_framework=AgentFramework.OPENAI\n                )\n                kwargs = {}\n                if managed_agent.model_args:\n                    kwargs[\"model_settings\"] = managed_agent.model_args\n                instance = Agent(\n                    name=managed_agent.name,\n                    instructions=get_instructions(managed_agent.instructions),\n                    model=self._get_model(managed_agent),\n                    tools=managed_tools,\n                    mcp_servers=[\n                        managed_mcp_server.server\n                        for managed_mcp_server in managed_mcp_servers\n                    ],\n                    **kwargs,\n                )\n                if managed_agent.handoff:\n                    handoffs.append(instance)\n                else:\n                    tools.append(\n                        instance.as_tool(\n                            tool_name=instance.name,\n                            tool_description=managed_agent.description\n                            or f\"Use the agent: {managed_agent.name}\",\n                        )\n                    )\n\n        kwargs = self.config.agent_args or {}\n        if self.config.model_args:\n            kwargs[\"model_settings\"] = self.config.model_args\n        self._agent = Agent(\n            name=self.config.name,\n            instructions=self.config.instructions,\n            model=self._get_model(self.config),\n            handoffs=handoffs,\n            tools=tools,\n            mcp_servers=[mcp_server.server for mcp_server in mcp_servers],\n            **kwargs,\n        )\n\n    @logger.catch(reraise=True)\n    def run(self, prompt: str) -&gt; Any:\n        \"\"\"Run the OpenAI agent with the given prompt.\"\"\"\n        if not agents_available:\n            raise ImportError(\n                \"You need to `pip install openai-agents` to use this agent\"\n            )\n\n        result = Runner.run_sync(self._agent, prompt, max_turns=OPENAI_MAX_TURNS)\n        logger.info(result.final_output)\n        return result\n\n    @property\n    def tools(self) -&gt; List[str]:\n        \"\"\"\n        Return the tools used by the agent.\n        This property is read-only and cannot be modified.\n        \"\"\"\n        if hasattr(self, \"_agent\") and hasattr(self._agent, \"tools\"):\n            # Extract tool names from the agent's tools\n            return [tool.name for tool in self._agent.tools if hasattr(tool, \"name\")]\n        return []\n</code></pre>"},{"location":"api/#any_agent.frameworks.OpenAIAgent.tools","title":"<code>tools</code>  <code>property</code>","text":"<p>Return the tools used by the agent. This property is read-only and cannot be modified.</p>"},{"location":"api/#any_agent.frameworks.OpenAIAgent.run","title":"<code>run(prompt)</code>","text":"<p>Run the OpenAI agent with the given prompt.</p> Source code in <code>src/any_agent/frameworks/openai.py</code> <pre><code>@logger.catch(reraise=True)\ndef run(self, prompt: str) -&gt; Any:\n    \"\"\"Run the OpenAI agent with the given prompt.\"\"\"\n    if not agents_available:\n        raise ImportError(\n            \"You need to `pip install openai-agents` to use this agent\"\n        )\n\n    result = Runner.run_sync(self._agent, prompt, max_turns=OPENAI_MAX_TURNS)\n    logger.info(result.final_output)\n    return result\n</code></pre>"},{"location":"api/#any_agent.frameworks.SmolagentsAgent","title":"<code>SmolagentsAgent</code>","text":"<p>               Bases: <code>AnyAgent</code></p> <p>Smolagents agent implementation that handles both loading and running.</p> Source code in <code>src/any_agent/frameworks/smolagents.py</code> <pre><code>class SmolagentsAgent(AnyAgent):\n    \"\"\"Smolagents agent implementation that handles both loading and running.\"\"\"\n\n    def __init__(\n        self, config: AgentConfig, managed_agents: Optional[list[AgentConfig]] = None\n    ):\n        self.managed_agents = managed_agents\n        self.config = config\n        self._agent = None\n        self._load_agent()\n\n    def _get_model(self, agent_config: AgentConfig):\n        \"\"\"Get the model configuration for a smolagents agent.\"\"\"\n        model_type = getattr(smolagents, agent_config.model_type or DEFAULT_MODEL_CLASS)\n        kwargs = {\n            \"model_id\": agent_config.model_id,\n        }\n        model_args = agent_config.model_args or {}\n        if api_key_var := model_args.pop(\"api_key_var\", None):\n            kwargs[\"api_key\"] = os.environ[api_key_var]\n        return model_type(**kwargs, **model_args)\n\n    def _merge_mcp_tools(self, mcp_servers):\n        \"\"\"Merge MCP tools from different servers.\"\"\"\n        tools = []\n        for mcp_server in mcp_servers:\n            tools.extend(mcp_server.tools)\n        return tools\n\n    @logger.catch(reraise=True)\n    def _load_agent(self) -&gt; None:\n        \"\"\"Load the Smolagents agent with the given configuration.\"\"\"\n        if not smolagents_available:\n            raise ImportError(\"You need to `pip install smolagents` to use this agent\")\n\n        if not self.managed_agents and not self.config.tools:\n            self.config.tools = [\n                \"any_agent.tools.search_web\",\n                \"any_agent.tools.visit_webpage\",\n            ]\n\n        tools, mcp_servers = import_and_wrap_tools(\n            self.config.tools, agent_framework=AgentFramework.SMOLAGENTS\n        )\n        tools.extend(self._merge_mcp_tools(mcp_servers))\n\n        managed_agents_instanced = []\n        if self.managed_agents:\n            for managed_agent in self.managed_agents:\n                agent_type = getattr(\n                    smolagents, managed_agent.agent_type or DEFAULT_AGENT_TYPE\n                )\n                managed_tools, managed_mcp_servers = import_and_wrap_tools(\n                    managed_agent.tools, agent_framework=AgentFramework.SMOLAGENTS\n                )\n                tools.extend(self._merge_mcp_tools(managed_mcp_servers))\n                managed_agent_instance = agent_type(\n                    name=managed_agent.name,\n                    model=self._get_model(managed_agent),\n                    tools=managed_tools,\n                    description=managed_agent.description\n                    or f\"Use the agent: {managed_agent.name}\",\n                )\n                if managed_agent.instructions:\n                    managed_agent_instance.prompt_templates[\"system_prompt\"] = (\n                        managed_agent.instructions\n                    )\n                managed_agents_instanced.append(managed_agent_instance)\n\n        main_agent_type = getattr(\n            smolagents, self.config.agent_type or DEFAULT_AGENT_TYPE\n        )\n\n        self._agent: MultiStepAgent = main_agent_type(\n            name=self.config.name,\n            model=self._get_model(self.config),\n            tools=tools,\n            managed_agents=managed_agents_instanced,\n            **self.config.agent_args or {},\n        )\n\n        if self.config.instructions:\n            self._agent.prompt_templates[\"system_prompt\"] = self.config.instructions\n\n    @logger.catch(reraise=True)\n    def run(self, prompt: str) -&gt; Any:\n        \"\"\"Run the Smolagents agent with the given prompt.\"\"\"\n        result = self._agent.run(prompt)\n        return result\n\n    @property\n    def tools(self) -&gt; List[str]:\n        \"\"\"\n        Return the tools used by the agent.\n        This property is read-only and cannot be modified.\n        \"\"\"\n        return self._agent.tools\n</code></pre>"},{"location":"api/#any_agent.frameworks.SmolagentsAgent.tools","title":"<code>tools</code>  <code>property</code>","text":"<p>Return the tools used by the agent. This property is read-only and cannot be modified.</p>"},{"location":"api/#any_agent.frameworks.SmolagentsAgent.run","title":"<code>run(prompt)</code>","text":"<p>Run the Smolagents agent with the given prompt.</p> Source code in <code>src/any_agent/frameworks/smolagents.py</code> <pre><code>@logger.catch(reraise=True)\ndef run(self, prompt: str) -&gt; Any:\n    \"\"\"Run the Smolagents agent with the given prompt.\"\"\"\n    result = self._agent.run(prompt)\n    return result\n</code></pre>"},{"location":"api/#any_agent.instructions","title":"<code>any_agent.instructions</code>","text":""},{"location":"api/#any_agent.instructions.get_instructions","title":"<code>get_instructions(instructions)</code>","text":"<p>Get the instructions from an external module.</p> <p>Parameters:</p> Name Type Description Default <code>instructions</code> <code>str | None</code> <p>Depending on the syntax used:</p> <ul> <li> <p>An import that points to a string in an external module.     For example: <code>agents.extensions.handoff_prompt.RECOMMENDED_PROMPT_PREFIX</code>.     The string will be imported from the external module.</p> </li> <li> <p>A regular string containing instructions.     For example: <code>You are a helpful assistant</code>.     The string will be returned as is.</p> </li> </ul> required <p>Returns:</p> Type Description <code>str | None</code> <p>Either the imported string or the input string as is.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>instructions</code> is an import but doesn't point to a string.</p> Source code in <code>src/any_agent/instructions/imports.py</code> <pre><code>def get_instructions(instructions: str | None) -&gt; str | None:\n    \"\"\"Get the instructions from an external module.\n\n    Args:\n        instructions: Depending on the syntax used:\n\n            - An import that points to a string in an external module.\n                For example: `agents.extensions.handoff_prompt.RECOMMENDED_PROMPT_PREFIX`.\n                The string will be imported from the external module.\n\n            - A regular string containing instructions.\n                For example: `You are a helpful assistant`.\n                The string will be returned as is.\n\n    Returns:\n        Either the imported string or the input string as is.\n\n    Raises:\n        ValueError: If `instructions` is an import but doesn't point to a string.\n    \"\"\"\n    if instructions and is_import(instructions):\n        module, obj = instructions.rsplit(\".\", 1)\n        module = importlib.import_module(module)\n        imported = getattr(module, obj)\n        if not isinstance(imported, str):\n            raise ValueError(\n                \"Instructions were identified as an import\"\n                f\" but the value imported is not a string:  {instructions}\"\n            )\n        return imported\n    return instructions\n</code></pre>"},{"location":"api/#any_agent.tools","title":"<code>any_agent.tools</code>","text":""},{"location":"api/#any_agent.tools.ask_user_verification","title":"<code>ask_user_verification(query)</code>","text":"<p>Asks user to verify the given <code>query</code>.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The question that requires verification.</p> required Source code in <code>src/any_agent/tools/user_interaction.py</code> <pre><code>def ask_user_verification(query: str) -&gt; str:\n    \"\"\"Asks user to verify the given `query`.\n\n    Args:\n        query: The question that requires verification.\n    \"\"\"\n    return input(f\"{query} =&gt; Type your answer here:\")\n</code></pre>"},{"location":"api/#any_agent.tools.search_web","title":"<code>search_web(query)</code>","text":"<p>Performs a duckduckgo web search based on your query (think a Google search) then returns the top search results.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The search query to perform.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The top search results.</p> Source code in <code>src/any_agent/tools/web_browsing.py</code> <pre><code>def search_web(query: str) -&gt; str:\n    \"\"\"Performs a duckduckgo web search based on your query (think a Google search) then returns the top search results.\n\n    Args:\n        query: The search query to perform.\n\n    Returns:\n        The top search results.\n    \"\"\"\n    ddgs = DDGS()\n    results = ddgs.text(query, max_results=10)\n    return \"\\n\".join(\n        f\"[{result['title']}]({result['href']})\\n{result['body']}\" for result in results\n    )\n</code></pre>"},{"location":"api/#any_agent.tools.send_console_message","title":"<code>send_console_message(user, query)</code>","text":"<p>Sends the specified user a message via console and returns their response. Args:     query: The question to ask the user.     user: The user to ask the question to. Returns:     str: The user's response.</p> Source code in <code>src/any_agent/tools/user_interaction.py</code> <pre><code>def send_console_message(user: str, query: str) -&gt; str:\n    \"\"\"Sends the specified user a message via console and returns their response.\n    Args:\n        query: The question to ask the user.\n        user: The user to ask the question to.\n    Returns:\n        str: The user's response.\n    \"\"\"\n    return input(f\"{query}\\n{user}&gt;&gt;\")\n</code></pre>"},{"location":"api/#any_agent.tools.show_final_answer","title":"<code>show_final_answer(answer)</code>","text":"<p>Show the final answer to the user.</p> <p>Parameters:</p> Name Type Description Default <code>answer</code> <code>str</code> <p>The final answer.</p> required Source code in <code>src/any_agent/tools/user_interaction.py</code> <pre><code>def show_final_answer(answer: str) -&gt; None:\n    \"\"\"Show the final answer to the user.\n\n    Args:\n        answer: The final answer.\n    \"\"\"\n    logger.info(f\"Final answer: {answer}\")\n    return answer\n</code></pre>"},{"location":"api/#any_agent.tools.show_plan","title":"<code>show_plan(plan)</code>","text":"<p>Show the current plan to the user.</p> <p>Parameters:</p> Name Type Description Default <code>plan</code> <code>str</code> <p>The current plan.</p> required Source code in <code>src/any_agent/tools/user_interaction.py</code> <pre><code>def show_plan(plan: str) -&gt; None:\n    \"\"\"Show the current plan to the user.\n\n    Args:\n        plan: The current plan.\n    \"\"\"\n    logger.info(f\"Current plan: {plan}\")\n    return plan\n</code></pre>"},{"location":"api/#any_agent.tools.visit_webpage","title":"<code>visit_webpage(url)</code>","text":"<p>Visits a webpage at the given url and reads its content as a markdown string. Use this to browse webpages.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url of the webpage to visit.</p> required Source code in <code>src/any_agent/tools/web_browsing.py</code> <pre><code>def visit_webpage(url: str) -&gt; str:\n    \"\"\"Visits a webpage at the given url and reads its content as a markdown string. Use this to browse webpages.\n\n    Args:\n        url: The url of the webpage to visit.\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n\n        markdown_content = markdownify(response.text).strip()\n\n        markdown_content = re.sub(r\"\\n{2,}\", \"\\n\", markdown_content)\n\n        return _truncate_content(markdown_content, 10000)\n    except RequestException as e:\n        return f\"Error fetching the webpage: {str(e)}\"\n    except Exception as e:\n        return f\"An unexpected error occurred: {str(e)}\"\n</code></pre>"},{"location":"api/#any_agent.config.AgentFramework","title":"<code>any_agent.config.AgentFramework</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> Source code in <code>src/any_agent/config.py</code> <pre><code>class AgentFramework(str, Enum):\n    OPENAI = \"openai\"\n    LANGCHAIN = \"langchain\"\n    SMOLAGENTS = \"smolagents\"\n    LLAMAINDEX = \"llama_index\"\n</code></pre>"},{"location":"api/#any_agent.config.AgentConfig","title":"<code>any_agent.config.AgentConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>src/any_agent/config.py</code> <pre><code>class AgentConfig(BaseModel):\n    model_config = ConfigDict(extra=\"forbid\")\n    model_id: str\n    name: str = \"default-name\"\n    instructions: str | None = None\n    tools: list[str | MCPTool] = Field(default_factory=list)\n    handoff: bool = False\n    agent_type: str | None = None\n    agent_args: dict | None = None\n    model_type: str | None = None\n    model_args: dict | None = None\n    description: str | None = None\n</code></pre>"}]}